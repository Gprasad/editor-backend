// Initializer -----------------------------------------------------------------

{
	var lib = require('pegjs-parser/initializer');
	var Node = new lib.NodeInstancier('js', true);
}

// Grammar ---------------------------------------------------------------------

start = content:ATJS* {
	var node =  Node('root', null, null, offset(), text());
	node.addList('content', lib.flatten(content));
	return node;
}

ATJS =
	  wsSequence
	/ braced
	/nonbracedNospace 
	
	
bracedParam = $(nonbraced / braced)

braced = opening:bracedOpening content:bracedContent? closing:bracedClosing {

	var openingId = opening.childrenIndex.id ? opening.childrenIndex.id.source : "";
	var closingId = closing.childrenIndex.id ? closing.childrenIndex.id.source : "";
	var node = Node('js-braced', null, null, offset(), text());

	node.add('openTag', opening);
	if (content) {
		node.add('content', content);
	}
	node.add('closeTag', closing);

	if (openingId != closingId) {
		opening.addError("Opening statement " + openingId + " does not match the corresponding closing statement " + closingId + ".");
		closing.addError("Closing statement " + closingId + " does not match the corresponding opening statement " + openingId + ".");
	}
	return node;
}

bracedOpening  = "{" {
	return Node('opening', null, null, offset(), text());
}

bracedClosing  = "}" {
	return Node('closing', null, null, offset(), text());
}

bracedContent = $(bracedContentComma)

bracedContentComma = (!bracedClosing (wrongbracedCommas)*)+ {
	var node = Node('braced-content', null, null, offset(), text());
	node.addError('This Statement is wrongly separated by Comma Operator.');
	return node;
}

wrongbracedCommas = ",,"


nonbraced =  $(escapedBrackets / [^{}])+

nonbracedNospace = value:$(escapedBrackets / [^{} \r\n\t])+ {
	var node = Node('js-non-braced', null, null, offset(), text());
	node.set('value', value);
	return node;
}

escapedBrackets = $("\\" ("{" / "}"))
	
	
	
	
// ---------------------------------------------------------------- White spaces

ws = [ \r\n\t\f]

wsSequence = nodes:(spaces / tabs / eols)+

spaces = content:" "+ {
	var node = Node('spaces', null, null, offset(), text());
	node.set('size', content.length);
	return node;
}

tabs = content:"\t"+ {
	var node = Node('tabs', null, null, offset(), text());
	node.set('size', content.length);
	return node;
}

eols = content:eol+ {
	var node = Node('eols', null, null, offset(), text());
	node.set('size', content.length);
	return node;
}

eol = ("\r\n" / "\n" / "\r")
